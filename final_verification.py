#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–§—ñ–Ω–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –¥–æ–º–∞—à–Ω—å–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è #9
"""

import json
import os
import sqlite3

def check_requirements():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –≤—Å—ñ –≤–∏–º–æ–≥–∏ –¥–æ–º–∞—à–Ω—å–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è #9"""
    print("üîç –ü–ï–†–ï–í–Ü–†–ö–ê –í–ò–ú–û–ì –î–û–ú–ê–®–ù–¨–û–ì–û –ó–ê–í–î–ê–ù–ù–Ø #9")
    print("=" * 60)
    
    requirements = {
        "BeautifulSoup –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è": False,
        "–°–∫—Ä–∞–ø—ñ–Ω–≥ quotes.toscrape.com": False,
        "quotes.json —Ñ–∞–π–ª": False,
        "authors.json —Ñ–∞–π–ª": False,
        "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–º—É –∑–∞–≤–¥–∞–Ω–Ω—é": False,
        "–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —Å—Ç–≤–æ—Ä–µ–Ω–∞": False,
        "–ü–æ–ø–µ—Ä–µ–¥–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è –ø—Ä–∞—Ü—é—î": False
    }
    
    # 1. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è BeautifulSoup
    try:
        with open('scraper.py', 'r', encoding='utf-8') as f:
            content = f.read()
            if 'BeautifulSoup' in content and 'bs4' in content:
                requirements["BeautifulSoup –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è"] = True
                print("‚úÖ BeautifulSoup –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è")
            else:
                print("‚ùå BeautifulSoup –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ scraper.py: {e}")
    
    # 2. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–∫—Ä–∞–ø—ñ–Ω–≥—É
    if os.path.exists('quotes.json') and os.path.exists('authors.json'):
        requirements["–°–∫—Ä–∞–ø—ñ–Ω–≥ quotes.toscrape.com"] = True
        print("‚úÖ –°–∫—Ä–∞–ø—ñ–Ω–≥ –≤–∏–∫–æ–Ω–∞–Ω–æ")
    else:
        print("‚ùå –§–∞–π–ª–∏ —Å–∫—Ä–∞–ø—ñ–Ω–≥—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    
    # 3. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ quotes.json
    try:
        with open('quotes.json', 'r', encoding='utf-8') as f:
            quotes = json.load(f)
            if len(quotes) > 0:
                requirements["quotes.json —Ñ–∞–π–ª"] = True
                print(f"‚úÖ quotes.json –º—ñ—Å—Ç–∏—Ç—å {len(quotes)} —Ü–∏—Ç–∞—Ç")
            else:
                print("‚ùå quotes.json –ø–æ—Ä–æ–∂–Ω—ñ–π")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è quotes.json: {e}")
    
    # 4. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ authors.json
    try:
        with open('authors.json', 'r', encoding='utf-8') as f:
            authors = json.load(f)
            if len(authors) > 0:
                requirements["authors.json —Ñ–∞–π–ª"] = True
                print(f"‚úÖ authors.json –º—ñ—Å—Ç–∏—Ç—å {len(authors)} –∞–≤—Ç–æ—Ä—ñ–≤")
            else:
                print("‚ùå authors.json –ø–æ—Ä–æ–∂–Ω—ñ–π")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è authors.json: {e}")
    
    # 5. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –¥–ª—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è
    try:
        with open('quotes_converted.json', 'r', encoding='utf-8') as f:
            quotes_converted = json.load(f)
        with open('authors_converted.json', 'r', encoding='utf-8') as f:
            authors_converted = json.load(f)
        
        if quotes_converted and authors_converted:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            first_quote = quotes_converted[0]
            first_author = authors_converted[0]
            
            if ('quote' in first_quote and 'author' in first_quote and 'tags' in first_quote and
                'fullname' in first_author and 'born_date' in first_author and 
                'born_location' in first_author and 'description' in first_author):
                requirements["–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–º—É –∑–∞–≤–¥–∞–Ω–Ω—é"] = True
                print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ JSON —Ñ–∞–π–ª—ñ–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–º—É –∑–∞–≤–¥–∞–Ω–Ω—é")
            else:
                print("‚ùå –°—Ç—Ä—É–∫—Ç—É—Ä–∞ JSON —Ñ–∞–π–ª—ñ–≤ –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–º—É –∑–∞–≤–¥–∞–Ω–Ω—é")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫–æ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤: {e}")
    
    # 6. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    try:
        conn = sqlite3.connect('quotes.db')
        cursor = conn.cursor()
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–∞–±–ª–∏—Ü—ñ
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
        tables = [row[0] for row in cursor.fetchall()]
        
        required_tables = ['authors', 'quotes', 'tags', 'quote_tags']
        if all(table in tables for table in required_tables):
            requirements["–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —Å—Ç–≤–æ—Ä–µ–Ω–∞"] = True
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —Å—Ç–≤–æ—Ä–µ–Ω–∞ –∑ —É—Å—ñ–º–∞ —Ç–∞–±–ª–∏—Ü—è–º–∏")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–∞–Ω—ñ
            cursor.execute("SELECT COUNT(*) FROM authors")
            authors_count = cursor.fetchone()[0]
            cursor.execute("SELECT COUNT(*) FROM quotes")
            quotes_count = cursor.fetchone()[0]
            cursor.execute("SELECT COUNT(*) FROM tags")
            tags_count = cursor.fetchone()[0]
            
            print(f"   üìä –ê–≤—Ç–æ—Ä—ñ–≤: {authors_count}")
            print(f"   üìä –¶–∏—Ç–∞—Ç: {quotes_count}")
            print(f"   üìä –¢–µ–≥—ñ–≤: {tags_count}")
        else:
            print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –Ω–µ –º—ñ—Å—Ç–∏—Ç—å –≤—Å—ñ—Ö –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö —Ç–∞–±–ª–∏—Ü—å")
        
        conn.close()
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: {e}")
    
    # 7. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–æ–±–æ—Ç–∏ –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–º –∑–∞–≤–¥–∞–Ω–Ω—è–º
    try:
        # –°–∏–º—É–ª—é—î–º–æ —Ä–æ–±–æ—Ç—É –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–º –∑–∞–≤–¥–∞–Ω–Ω—è–º
        with open('quotes_converted.json', 'r', encoding='utf-8') as f:
            quotes_data = json.load(f)
        
        # –¢–µ—Å—Ç—É—î–º–æ –ø–æ—à—É–∫ –∑–∞ –∞–≤—Ç–æ—Ä–æ–º
        einstein_quotes = [q for q in quotes_data if 'Einstein' in q.get('author', '')]
        # –¢–µ—Å—Ç—É—î–º–æ –ø–æ—à—É–∫ –∑–∞ —Ç–µ–≥–æ–º
        inspirational_quotes = [q for q in quotes_data if 'inspirational' in q.get('tags', [])]
        
        if len(einstein_quotes) > 0 and len(inspirational_quotes) > 0:
            requirements["–ü–æ–ø–µ—Ä–µ–¥–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è –ø—Ä–∞—Ü—é—î"] = True
            print("‚úÖ –ü–æ–ø–µ—Ä–µ–¥–Ω—î –¥–æ–º–∞—à–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è –ø—Ä–∞—Ü—é—î –∫–æ—Ä–µ–∫—Ç–Ω–æ")
        else:
            print("‚ùå –ü–æ–ø–µ—Ä–µ–¥–Ω—î –¥–æ–º–∞—à–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –ø—Ä–∞—Ü—é—î")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è: {e}")
    
    return requirements

def print_summary(requirements):
    """–í–∏–≤–æ–¥–∏—Ç—å –ø—ñ–¥—Å—É–º–æ–∫ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏"""
    print("\n" + "=" * 60)
    print("üìã –ü–Ü–î–°–£–ú–û–ö –ü–ï–†–ï–í–Ü–†–ö–ò")
    print("=" * 60)
    
    passed = sum(requirements.values())
    total = len(requirements)
    
    for req, status in requirements.items():
        status_icon = "‚úÖ" if status else "‚ùå"
        print(f"{status_icon} {req}")
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} –≤–∏–º–æ–≥ –≤–∏–∫–æ–Ω–∞–Ω–æ")
    
    if passed == total:
        print("\nüéâ –í–°–Ü –í–ò–ú–û–ì–ò –î–û–ú–ê–®–ù–¨–û–ì–û –ó–ê–í–î–ê–ù–ù–Ø #9 –í–ò–ö–û–ù–ê–ù–û!")
        print("‚úÖ –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤–∏–π –¥–æ –∑–¥–∞—á—ñ")
    else:
        print(f"\n‚ö†Ô∏è  –ù–µ –≤–∏–∫–æ–Ω–∞–Ω–æ {total - passed} –≤–∏–º–æ–≥")
        print("‚ùå –ü–æ—Ç—Ä—ñ–±–Ω–æ –¥–æ–æ–ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –ø—Ä–æ–µ–∫—Ç")

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    print("üöÄ –§–Ü–ù–ê–õ–¨–ù–ê –ü–ï–†–ï–í–Ü–†–ö–ê –î–û–ú–ê–®–ù–¨–û–ì–û –ó–ê–í–î–ê–ù–ù–Ø #9")
    print("=" * 60)
    
    requirements = check_requirements()
    print_summary(requirements)
    
    print("\nüìÅ –°—Ç–≤–æ—Ä–µ–Ω—ñ —Ñ–∞–π–ª–∏:")
    files = [
        'scraper.py', 'database_loader.py', 'quotes_manager.py',
        'quotes.json', 'authors.json', 'quotes_converted.json', 
        'authors_converted.json', 'quotes.db', 'README.md'
    ]
    
    for file in files:
        if os.path.exists(file):
            print(f"  ‚úÖ {file}")
        else:
            print(f"  ‚ùå {file} (–≤—ñ–¥—Å—É—Ç–Ω—ñ–π)")

if __name__ == "__main__":
    main() 