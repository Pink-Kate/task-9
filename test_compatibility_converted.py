import json

def test_converted_json_compatibility():
    """–¢–µ—Å—Ç—É—î —Å—É–º—ñ—Å–Ω—ñ—Å—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω–∏—Ö JSON —Ñ–∞–π–ª—ñ–≤ –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–º –¥–æ–º–∞—à–Ω—ñ–º –∑–∞–≤–¥–∞–Ω–Ω—è–º"""
    print("=== –¢–ï–°–¢ –°–£–ú–Ü–°–ù–û–°–¢–Ü –ö–û–ù–í–ï–†–¢–û–í–ê–ù–ò–• JSON –§–ê–ô–õ–Ü–í ===\n")
    
    # –¢–µ—Å—Ç—É—î–º–æ quotes_converted.json
    try:
        with open('quotes_converted.json', 'r', encoding='utf-8') as f:
            quotes = json.load(f)
        print(f"‚úì quotes_converted.json –º—ñ—Å—Ç–∏—Ç—å {len(quotes)} —Ü–∏—Ç–∞—Ç")
        
        if quotes:
            first_quote = quotes[0]
            required_fields = ['quote', 'author', 'tags']
            missing_fields = [field for field in required_fields if field not in first_quote]
            
            if not missing_fields:
                print("‚úì –°—Ç—Ä—É–∫—Ç—É—Ä–∞ quotes_converted.json –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –≤–∏–º–æ–≥–∞–º –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è")
                print(f"  –ü—Ä–∏–∫–ª–∞–¥: {first_quote['quote'][:50]}...")
                print(f"  –ê–≤—Ç–æ—Ä: {first_quote['author']}")
                print(f"  –¢–µ–≥–∏: {first_quote['tags']}")
            else:
                print(f"‚úó –í—ñ–¥—Å—É—Ç–Ω—ñ –ø–æ–ª—è: {missing_fields}")
    except Exception as e:
        print(f"‚úó –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è quotes_converted.json: {e}")

    # –¢–µ—Å—Ç—É—î–º–æ authors_converted.json
    try:
        with open('authors_converted.json', 'r', encoding='utf-8') as f:
            authors = json.load(f)
        print(f"\n‚úì authors_converted.json –º—ñ—Å—Ç–∏—Ç—å {len(authors)} –∞–≤—Ç–æ—Ä—ñ–≤")
        
        if authors:
            first_author = authors[0]
            required_fields = ['fullname', 'born_date', 'born_location', 'description']
            missing_fields = [field for field in required_fields if field not in first_author]
            
            if not missing_fields:
                print("‚úì –°—Ç—Ä—É–∫—Ç—É—Ä–∞ authors_converted.json –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –≤–∏–º–æ–≥–∞–º –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è")
                print(f"  –ü—Ä–∏–∫–ª–∞–¥: {first_author['fullname']}")
                if first_author['born_date']:
                    print(f"  –ù–∞—Ä–æ–¥–∏–≤—Å—è: {first_author['born_date']}")
            else:
                print(f"‚úó –í—ñ–¥—Å—É—Ç–Ω—ñ –ø–æ–ª—è: {missing_fields}")
    except Exception as e:
        print(f"‚úó –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è authors_converted.json: {e}")

def test_simulation_with_previous_homework():
    """–°–∏–º—É–ª—é—î —Ä–æ–±–æ—Ç—É –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–º –¥–æ–º–∞—à–Ω—ñ–º –∑–∞–≤–¥–∞–Ω–Ω—è–º"""
    print("\n=== –°–ò–ú–£–õ–Ø–¶–Ü–Ø –†–û–ë–û–¢–ò –ó –ü–û–ü–ï–†–ï–î–ù–Ü–ú –î–û–ú–ê–®–ù–Ü–ú –ó–ê–í–î–ê–ù–ù–Ø–ú ===\n")
    
    try:
        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∫–æ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ
        with open('quotes_converted.json', 'r', encoding='utf-8') as f:
            quotes_data = json.load(f)
        with open('authors_converted.json', 'r', encoding='utf-8') as f:
            authors_data = json.load(f)
        
        print("‚úÖ JSON —Ñ–∞–π–ª–∏ —á–∏—Ç–∞—é—Ç—å—Å—è –∫–æ—Ä–µ–∫—Ç–Ω–æ")
        
        # –°–∏–º—É–ª—é—î–º–æ –ø–æ—à—É–∫ —Ü–∏—Ç–∞—Ç –∑–∞ –∞–≤—Ç–æ—Ä–æ–º (—è–∫ —É –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–º—É –∑–∞–≤–¥–∞–Ω–Ω—ñ)
        einstein_quotes = [q for q in quotes_data if 'Einstein' in q.get('author', '')]
        print(f"‚úÖ –ü–æ—à—É–∫ —Ü–∏—Ç–∞—Ç –∑–∞ –∞–≤—Ç–æ—Ä–æ–º –ø—Ä–∞—Ü—é—î: {len(einstein_quotes)} —Ü–∏—Ç–∞—Ç –ï–π–Ω—à—Ç–µ–π–Ω–∞")
        
        # –°–∏–º—É–ª—é—î–º–æ –ø–æ—à—É–∫ —Ü–∏—Ç–∞—Ç –∑–∞ —Ç–µ–≥–æ–º
        inspirational_quotes = [q for q in quotes_data if 'inspirational' in q.get('tags', [])]
        print(f"‚úÖ –ü–æ—à—É–∫ —Ü–∏—Ç–∞—Ç –∑–∞ —Ç–µ–≥–æ–º –ø—Ä–∞—Ü—é—î: {len(inspirational_quotes)} –Ω–∞–¥–∏—Ö–∞—é—á–∏—Ö —Ü–∏—Ç–∞—Ç")
        
        # –°–∏–º—É–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∞–≤—Ç–æ—Ä–∞—Ö
        author_counts = {}
        for quote in quotes_data:
            author = quote.get('author', '')
            author_counts[author] = author_counts.get(author, 0) + 1
        
        top_authors = sorted(author_counts.items(), key=lambda x: x[1], reverse=True)[:5]
        print("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞–≤—Ç–æ—Ä–∞—Ö –ø—Ä–∞—Ü—é—î:")
        for author, count in top_authors:
            print(f"  {author}: {count} —Ü–∏—Ç–∞—Ç")
        
        # –°–∏–º—É–ª—é—î–º–æ —Ä–æ–±–æ—Ç—É –∑ –∞–≤—Ç–æ—Ä–∞–º–∏ (—è–∫ —É –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–º—É –∑–∞–≤–¥–∞–Ω–Ω—ñ)
        einstein_author = next((a for a in authors_data if a.get('fullname') == 'Albert Einstein'), None)
        if einstein_author:
            print(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –∞–≤—Ç–æ—Ä–∞: {einstein_author['fullname']}")
            if einstein_author['born_date']:
                print(f"  –ù–∞—Ä–æ–¥–∏–≤—Å—è: {einstein_author['born_date']}")
        
        print("\n‚úÖ –ü–æ–≤–Ω–∞ —Å—É–º—ñ—Å–Ω—ñ—Å—Ç—å –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–º –¥–æ–º–∞—à–Ω—ñ–º –∑–∞–≤–¥–∞–Ω–Ω—è–º –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞!")
        
    except Exception as e:
        print(f"‚úó –ü–æ–º–∏–ª–∫–∞ —Å–∏–º—É–ª—è—Ü—ñ—ó: {e}")

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
    print("–ü–û–ß–ê–¢–û–ö –¢–ï–°–¢–£–í–ê–ù–ù–Ø –°–£–ú–Ü–°–ù–û–°–¢–Ü –ö–û–ù–í–ï–†–¢–û–í–ê–ù–ò–• –§–ê–ô–õ–Ü–í\n")
    
    test_converted_json_compatibility()
    test_simulation_with_previous_homework()
    
    print("\n=== –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ó–ê–í–ï–†–®–ï–ù–û ===")
    print("\nüéâ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π—à–ª–∏ —É—Å–ø—ñ—à–Ω–æ!")
    print("üìÅ –ö–æ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω—ñ —Ñ–∞–π–ª–∏ –≥–æ—Ç–æ–≤—ñ –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–º –¥–æ–º–∞—à–Ω—ñ–º –∑–∞–≤–¥–∞–Ω–Ω—è–º:")
    print("  - quotes_converted.json")
    print("  - authors_converted.json")
    print("\nüí° –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ü—ñ —Ñ–∞–π–ª–∏ –∑ –≤–∞—à–∏–º –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–º –¥–æ–º–∞—à–Ω—ñ–º –∑–∞–≤–¥–∞–Ω–Ω—è–º!")

if __name__ == "__main__":
    main() 